{"version":3,"sources":["Components/Card.js","Components/CardList.js","robots.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","username","id","email","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","filteredRobots","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"oOAeeA,EAbF,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,GAAIC,EAAU,EAAVA,MAClC,OACC,yBAAKC,UAAW,uDACf,yBAAKC,IAAG,+BAA0BH,EAA1B,iBAA6CI,IAAI,WACzD,6BACC,wBAAIF,UAAW,OAAOJ,GACtB,wBAAII,UAAW,OAAOH,GACtB,uBAAGG,UAAW,OAAOD,MCcVI,EApBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACC,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GACnB,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLT,GAAIM,EAAOG,GAAGT,GACdF,KAAMQ,EAAOG,GAAGX,KAChBC,SAAUO,EAAOG,GAAGV,SACpBE,MAAOK,EAAOG,GAAGR,aCdXK,EAAS,CACtB,CACCN,GAAI,MACJF,KAAM,eACNC,SAAU,UACVE,MAAO,qBAER,CACCD,GAAI,EACJF,KAAM,mBACNC,SAAU,QACVE,MAAO,mBAER,CACCD,GAAI,KACJF,KAAM,gBACNC,SAAU,QACVE,MAAO,mBAER,CACCD,GAAI,EACJF,KAAM,gBACNC,SAAU,OACVE,MAAO,kBAER,CACCD,GAAI,EACJF,KAAM,iBACNC,SAAU,SACVE,MAAO,oBAER,CACCD,GAAI,EACJF,KAAM,iBACNC,SAAU,MACVE,MAAO,iBAER,CACCD,GAAI,IACJF,KAAM,iBACNC,SAAU,MACVE,MAAO,iBAER,CACCD,GAAI,EACJF,KAAM,eACNC,SAAU,SACVE,MAAO,qBChCOU,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACC,yBAAKV,UAAU,OACd,2BACCA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCGCI,G,MAVA,SAACC,GACf,OACC,yBAAKC,MAAO,CAACC,UAAU,SACrBC,OAAO,kBACPC,OAAQ,UAERJ,EAAMK,YCeKC,E,kDApBd,WAAYN,GAAQ,IAAD,8BAClB,cAAMA,IACDO,MAAQ,CACZC,UAAU,GAHO,E,8DAOFC,EAAOC,GACxBC,KAAKC,SAAU,CAAEJ,UAAS,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACP,wDAEDG,KAAKX,MAAMK,a,GAhBQQ,aCwCZC,E,kDA9Bd,aAAe,IAAD,8BACb,gBAODC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAP1C,EAAKZ,MAAQ,CACZlB,OAAQA,EACR4B,YAAa,IAJD,E,qDAYJ,IAAD,OACFG,EAAiBT,KAAKJ,MAAMlB,OAAOgC,QAAO,SAAAC,GAC/C,OAAOA,EAAMzC,KAAK0C,cAAcC,SAAS,EAAKjB,MAAMU,YAAYM,kBAEjE,OACC,yBAAKtC,UAAU,MACd,wBAAIA,UAAU,MAAd,iBACA,kBAAC,EAAD,CAAWU,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU1B,OAAQ+B,W,GAvBNP,aCCEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLiC,QAAQjC,MAAMA,EAAMkC,a","file":"static/js/main.54f86a45.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, username, id, email}) =>{\r\n\treturn (\r\n\t\t<div className= 'tc bg-light-green dib br4 pa2 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img src={`https://robohash.org/${id}?size=200x200`} alt='robots' />\r\n\t\t\t<div >\r\n\t\t\t\t<h2 className= 'ma2'>{name}</h2>\r\n\t\t\t\t<h3 className= 'ma1'>{username}</h3>\r\n\t\t\t\t<p className= 'ma1'>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t    robots.map((user, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\t\tusername={robots[i].username} \r\n\t\t\t\t\t\t\temail={robots[i].email} \r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\t\r\n\t\t \t\t})\r\n\t\t \t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","export const robots = [\r\n{\r\n\tid: 89879,\r\n\tname: 'Jorge Marcos',\r\n\tusername: 'Chorchi',\r\n\temail: 'chorchi@email.com'\r\n},\r\n{\r\n\tid: 2,\r\n\tname: 'Constanza Brinzo',\r\n\tusername: 'Choti',\r\n\temail: 'choti@email.com'\r\n},\r\n{\r\n\tid: 5345,\r\n\tname: 'Pablo Morizio',\r\n\tusername: 'Zarpe',\r\n\temail: 'zarpe@email.com'\r\n},\r\n{\r\n\tid: 4,\r\n\tname: 'Gustavo Silva',\r\n\tusername: 'Mono',\r\n\temail: 'mono@email.com'\r\n},\r\n{\r\n\tid: 5,\r\n\tname: 'Kevin y Fatima',\r\n\tusername: 'Ketima',\r\n\temail: 'ketima@email.com'\r\n},\r\n{\r\n\tid: 6,\r\n\tname: 'Analia Sciarra',\r\n\tusername: 'Ani',\r\n\temail: 'ani@email.com'\r\n},\r\n{\r\n\tid: 231,\r\n\tname: 'Leila Michanie',\r\n\tusername: 'Lei',\r\n\temail: 'lei@email.com'\r\n},\r\n{\r\n\tid: 8,\r\n\tname: 'Melina Vasta',\r\n\tusername: 'Felina',\r\n\temail: 'felina@email.com'\r\n}\r\n]","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input\r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue' \r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='Search Robots'\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY:'scroll',\r\n\t\t\t border:'2px solid black', \r\n\t\t\t height: '500px'}\r\n\t\t\t}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\nexport default Scroll","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\ncomponentDidCatch(error, info) {\r\n\tthis.setState ({ hasError:true })\r\n}\r\n\r\nrender(){\r\n\tif (this.state.hasError){\r\n\t\treturn <h1> Oops! That's not good! </h1>\r\n\t}\r\n\treturn this.props.children\r\n}\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport {robots} from '../robots';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundry from '../Components/ErrorBoundry';\r\n\t\r\n\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: robots,\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\t\tthis.setState({searchfield: event.target.value})\r\n\t\t}\r\n\r\n\trender() {\r\n\t\tconst filteredRobots = this.state.robots.filter(robot=> {\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t})\r\n\t\treturn (\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1' >Circus Robots</h1>\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}